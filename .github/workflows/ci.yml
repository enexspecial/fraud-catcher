name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-node:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: packages/node/package-lock.json
    
    - name: Install dependencies
      run: |
        cd packages/node
        npm ci
    
    - name: Run linter
      run: |
        cd packages/node
        npm run lint
    
    - name: Build package
      run: |
        cd packages/node
        npm run build
    
    - name: Run tests
      run: |
        cd packages/node
        npm test -- --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: packages/node/coverage/lcov.info
        flags: node
        name: node-coverage

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd packages/python
        pip install -e .[dev]
    
    - name: Run linter
      run: |
        cd packages/python
        flake8 src/
        black --check src/
        isort --check-only src/
        mypy src/
    
    - name: Run tests
      run: |
        cd packages/python
        pytest --cov=fraud_catcher --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: packages/python/coverage.xml
        flags: python
        name: python-coverage

  build-and-publish:
    needs: [test-node, test-python]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Node.js dependencies
      run: |
        cd packages/node
        npm ci
    
    - name: Install Python dependencies
      run: |
        cd packages/python
        pip install build twine
    
    - name: Build Node.js package
      run: |
        cd packages/node
        npm run build
    
    - name: Build Python package
      run: |
        cd packages/python
        python -m build
    
    - name: Publish Node.js package
      run: |
        cd packages/node
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Publish Python package
      run: |
        cd packages/python
        python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
